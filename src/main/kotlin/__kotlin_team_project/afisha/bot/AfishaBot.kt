package __kotlin_team_project.afisha.bot

import com.github.kotlintelegrambot.bot
import com.github.kotlintelegrambot.dispatch
import com.github.kotlintelegrambot.dispatcher.command
import com.github.kotlintelegrambot.dispatcher.text
import com.github.kotlintelegrambot.entities.ChatId
import org.springframework.beans.factory.annotation.Value
import org.springframework.stereotype.Component
import jakarta.annotation.PostConstruct
import __kotlin_team_project.afisha.repository.EventRepository
import org.slf4j.LoggerFactory

@Component
class AfishaBot(
    @Value("\${telegram.bot.token}") private val token: String,
    private val eventRepository: EventRepository
) {
    private val logger = LoggerFactory.getLogger(AfishaBot::class.java)
    
    private val bot = bot {
        token = this@AfishaBot.token
        dispatch {
            command("start") {
                logger.info("Received /start command from chat ${message.chat.id}")
                val chatId = ChatId.fromId(message.chat.id)
                bot.sendMessage(
                    chatId = chatId,
                    text = """
                        –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∞—Ñ–∏—à–∏. –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.
                        
                        –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
                        /events - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
                        /search <—Ç–µ–∫—Å—Ç> - –ø–æ–∏—Å–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
                    """.trimIndent()
                )
            }
            
            command("events") {
                val chatId = ChatId.fromId(message.chat.id)
                val events = eventRepository.findAll()
                if (events.isEmpty()) {
                    bot.sendMessage(
                        chatId = chatId,
                        text = "–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"
                    )
                } else {
                    val message = events.joinToString("\n\n") { event ->
                        """
                        üé´ ${event.name}
                        üìç ${event.location}
                        üí∞ ${event.price} —Ä—É–±.
                        üìÖ ${event.dateTime.toString()}
                        """.trimIndent()
                    }
                    bot.sendMessage(
                        chatId = chatId,
                        text = message
                    )
                }
            }
            
            command("search") {
                val chatId = ChatId.fromId(message.chat.id)
                val query = args.joinToString(" ")
                if (query.isBlank()) {
                    bot.sendMessage(
                        chatId = chatId,
                        text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /search"
                    )
                    return@command
                }
                
                val events = eventRepository.findByNameContainingIgnoreCase(query)
                if (events.isEmpty()) {
                    bot.sendMessage(
                        chatId = chatId,
                        text = "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ –∑–∞–ø—Ä–æ—Å—É '$query' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
                    )
                } else {
                    val message = events.joinToString("\n\n") { event ->
                        """
                        üé´ ${event.name}
                        üìç ${event.location}
                        üí∞ ${event.price} —Ä—É–±.
                        üìÖ ${event.dateTime.toString()}
                        """.trimIndent()
                    }
                    bot.sendMessage(
                        chatId = chatId,
                        text = message
                    )
                }
            }
        }
    }

    @PostConstruct
    fun start() {
        logger.info("Starting Telegram bot")
        bot.startPolling()
    }
} 